@page "/edit"
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<LPBlazorServerContext> DbFactory
@inject IConfiguration Configuration

<h3>Edit data</h3>

<button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">Toggle right offcanvas</button>

<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
    Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<form @onsubmit="LoadData">
    <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" id="isTransferSwitch" @bind="FilterIsTransfer">
        <label class="form-check-label" for="isTransferSwitch">Exclude Transfer</label>
    </div>
    <div class="row">
        <div class="col-1">
            <input type="date" class="form-control" @bind="StartDate" min="@DateTime.Now.AddYears(-5).ToString("yyyy-MM-dd")" max="@DateTime.Now.ToString("yyyy-MM-dd")" @oninput="LoadData">
        </div>
        <div class="col-1">
            <input type="date" class="form-control" @bind="EndDate" min="@DateTime.Now.AddYears(-5).ToString("yyyy-MM-dd")" max="@DateTime.Now.ToString("yyyy-MM-dd")" @oninput="LoadData">
        </div>
        <div class="col-1">
            <button class="btn btn-primary" type="submit">Refresh</button>
        </div>
    </div>
</form>
<br/>


<table class="table">
    <thead>
    <tr>
        <th>Date</th>
        <th>Merchant</th>
        <th>Amount</th>
        <th>Category</th>
        <th>IsTransfer</th>
        <th>IsSubscription</th>
        <th>IsAccident</th>
    </tr>
    </thead>
    <tbody>
    @if(TransactionsData != null)
    {
        foreach(var trans in TransactionsData)
        {
            <tr style="align-content:center">
                <td>@trans.TransDate.ToString("dd/MM/yyyy")</td>
                <td>@trans.Merchant</td>
                <td>@trans.Amount</td>
                <td>
                    @if(CategoriesData != null)
                    {
                        <select class="form-select form-select-sm" id="cat-select" @onchange="@(s => UploadCategory(trans.TransId, s))">
                            @foreach (var cat in CategoriesData)
                            {
                                if (trans.CategoryName == cat)
                                {
                                    <option value="@cat" selected>@cat</option>
                                }
                                else 
                                {
                                    <option value="@cat">@cat</option>
                                }
                            }
                        </select>
                    }
                </td>
                <td>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" role="switch" @oninput="@(e => UploadIsTransfer(trans.TransId, e))" checked="@trans.IsTransfer">
                    </div>
                </td>
                <td>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" role="switch" @oninput="@(e => UploadIsSubscription(trans.TransId, e))" checked="@trans.IsSubscription">
                    </div>
                </td>
                <td>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" role="switch" @oninput="@(e => UploadIsAccident(trans.TransId, e))" checked="@trans.IsAccident">
                    </div>
                </td>
            </tr>
        }
    }
    </tbody>
</table>
@if (Running)
{
    <div class="progress" role="progressbar" aria-label="Danger striped example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
        <div class="progress-bar progress-bar-striped bg-danger" style="width: 100%"></div>
    </div>
}

<p>@ErrorMessage</p>

@code {
    public List<Transaction>? TransactionsData = new List<Transaction>();
    public List<string>? CategoriesData = new List<string>();
    public string ErrorMessage = string.Empty;
    public LPBlazorServerContext? _context;
    public DateTime StartDate { get; set; } = DateTime.Now.AddMonths(-5);
    public DateTime EndDate { get; set; } = DateTime.Now;
    private bool Running { get; set; }
    public bool FilterIsTransfer { get; set; } = true;

    public async Task LoadData()
    {
        Running = true;
        if (_context == null)
        {
            ErrorMessage = "Failed to load database";
        }
        else
        {
            if (_context.Transactions == null)
            {
                ErrorMessage = "Failed to load Transaction container";
            }
            else
            {
                CategoriesData = Configuration.GetSection("Categories").Get<List<string>>();
                TransactionsData = await _context.Transactions
                    .Where(t => t.TransDate >= StartDate && t.TransDate <= EndDate && (!FilterIsTransfer || !t.IsTransfer))
                    .OrderBy(t => t.TransDate)
                    .ToListAsync();
            }
        }
        Running = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _context = await DbFactory.CreateDbContextAsync();
        await LoadData();
    }

    public async Task UploadCategory(string? transactionId, ChangeEventArgs newCategory)
    {
        try
        {
            var transaction = await _context.Transactions.FindAsync(transactionId);

            if (transaction == null)
            {
                ErrorMessage = "Transaction not found";
                return;
            }

            transaction.CategoryName = newCategory.Value.ToString();

            await _context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to update transaction: " + ex.Message;
        }
    }

    public async Task UploadIsTransfer(string? transactionId, ChangeEventArgs newState)
    {
        try
        {
            var transaction = await _context.Transactions.FindAsync(transactionId);

            if (transaction == null)
            {
                ErrorMessage = "Transaction not found";
                return;
            }

            transaction.IsTransfer = Convert.ToBoolean(newState.Value);

            await _context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to update transaction: " + ex.Message;
        }
    }

    public async Task UploadIsSubscription(string? transactionId, ChangeEventArgs newState)
    {
        try
        {
            var transaction = await _context.Transactions.FindAsync(transactionId);

            if (transaction == null)
            {
                ErrorMessage = "Transaction not found";
                return;
            }

            transaction.IsSubscription = Convert.ToBoolean(newState.Value);

            await _context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to update transaction: " + ex.Message;
        }
    }

    public async Task UploadIsAccident(string? transactionId, ChangeEventArgs newState)
    {
        try
        {
            var transaction = await _context.Transactions.FindAsync(transactionId);

            if (transaction == null)
            {
                ErrorMessage = "Transaction not found";
                return;
            }

            transaction.IsAccident = Convert.ToBoolean(newState.Value);

            await _context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Failed to update transaction: " + ex.Message;
        }
    }
}