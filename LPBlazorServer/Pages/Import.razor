@page "/import"
@using Microsoft.Azure.Cosmos
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<LPBlazorServerContext> DbFactory
@inject IConfiguration Configuration

<h3>Import</h3>

<form @onsubmit="UploadData">
    <div class="mb-3">
        <label class="form-label" for="column-style">Select the column style:</label>
        <select class="form-select" id="colum-style" @bind="ColumnStyle" required>
            <option value="DateAmountMerchant" selected>Date,Amount,Merchant</option>
            <option value="DateMerchantAmount">Date,Merchant,Amount</option>
            <option value="MerchantDateAmount">Merchant,Date,Amount</option>
            <option value="MerchantAmountDate">Merchant,Amount,Date</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="paste-csv" class="form-label">Paste csv to here:</label>
        <textarea class="form-control" style="height:50vh" id="paste-csv" @bind="RawData"></textarea>
    </div>
    <div class="mb-3">
        <label class="form-label" for="account-select">Select the account:</label>
        <select class="form-select" id="account-select" @bind="Account" required>
            @foreach (var account in accountsData)
            {
                <option value="@account">@account</option>
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Upload</button>
    @if (Running)
    {
        <p>Running...</p>
    }
</form>

<p>@ErrorMessage</p>

@code {
    private string ColumnStyle = "DateAmountMerchant";
    private string RawData = "";
    private string Account = "";
    private string ErrorMessage = "";
    private bool Running = false;
    public LPBlazorServerContext? _context;
    private List<string> accountsData = new List<String>();

    protected override async Task OnInitializedAsync()
    {
        accountsData = Configuration.GetSection("Accounts").Get<List<string>>();
    }

    private async Task UploadData()
    {
        Running = true;

        _context = await DbFactory.CreateDbContextAsync();

        var transactions = new List<Transaction>();

        var rows = RawData.Split("\n");

        foreach (var row in rows)
        {
            if (string.IsNullOrWhiteSpace(row)) continue;

            var columns = row.Split(',');

            var transaction = new Transaction();
            switch (ColumnStyle)
            {
                case "DateAmountMerchant":
                    transaction.TransDate = DateTime.Parse(columns[0].Trim('\"'));
                    transaction.Amount = double.Parse(columns[1].Trim('\"'));
                    transaction.Merchant = columns[2].Trim('\"');
                    break;
                case "DateMerchantAmount":
                    transaction.TransDate = DateTime.Parse(columns[0].Trim('\"'));
                    transaction.Merchant = columns[1].Trim('\"');
                    transaction.Amount = double.Parse(columns[2].Trim('\"'));
                    break;
                case "MerchantDateAmount":
                    transaction.Merchant = columns[0].Trim('\"');
                    transaction.TransDate = DateTime.Parse(columns[1].Trim('\"'));
                    transaction.Amount = double.Parse(columns[2].Trim('\"'));
                    break;
                case "MerchantAmountDate":
                    transaction.Merchant = columns[0].Trim('\"');
                    transaction.Amount = double.Parse(columns[1].Trim('\"'));
                    transaction.TransDate = DateTime.Parse(columns[2].Trim('\"'));
                    break;
            }
            transaction.Account = Account;
            transactions.Add(transaction);
        }
        ErrorMessage = transactions.Count.ToString();

        try
        {
            _context.Transactions.AddRange(transactions);
            await _context.SaveChangesAsync();
            ErrorMessage = $"Uploaded {transactions.Count} transactions successfully.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to upload transactions: {ex.Message}";
        }
        finally
        {
            Running = false;
        }
    }
}