@page "/import"
@using Microsoft.Azure.Cosmos
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<LPBlazorServerContext> DbFactory
@inject IConfiguration Configuration
@inject NotificationService NotificationService

<h3>Import</h3>
<RadzenTemplateForm TItem="Model" Data=@model Submit="@UploadData" InvalidSubmit="@OnIvalidSubmit">
    <div class="row mb-5">
        <RadzenDropDown @bind-Value=@model.selectedAccount Data=@accounts Name="AccountSelector" Placeholder="Please select a bank account" Style="max-width:50vh;"/>
        <RadzenRequiredValidator Component="AccountSelector" Text="Account is required" Style="position: absolute" />
    </div>
    
    <div class="row mb-5">
        <RadzenDropDown @bind-Value=@model.selectedStyle Data=@styles Name="StyleSelector" Placeholder="Please select a csv column style" Style="max-width:50vh;"/>
        <RadzenRequiredValidator Component="StyleSelector" Text="CSV column style is required" Style="position: absolute" />
    </div>
    
    <div class="row mb-5">
        <RadzenTextArea Placeholder="Please paste CSV here..." @bind-Value=@model.csvInput Name="CsvInput" class="w-100" Style="min-height:50vh;max-height:70vh;"/>
        <RadzenRequiredValidator Component="CsvInput" Text="CSV data is required" Style="position: absolute" />
    </div>
    
    <div class="row mb-5">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Upload" ButtonType="ButtonType.Submit" Style="max-width:50vh;"/>
    </div>
</RadzenTemplateForm>



<p>@ErrorMessage</p>

@code {
    public LPBlazorServerContext? _context;
    bool Running = false;
    string ErrorMessage = "";
    IEnumerable<string> accounts;
    IEnumerable<string> styles;

    class Model
    {
        public string selectedAccount { get; set; }
        public string selectedStyle { get; set; }
        public string csvInput { get; set; }
    }

    Model model = new Model();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        accounts = Configuration.GetSection("Accounts").Get<List<string>>();
        styles = Configuration.GetSection("Styles").Get<List<string>>();
    }

    private async Task UploadData()
    {
        try
        {
            Running = true;

            _context = await DbFactory.CreateDbContextAsync();

            var transactions = new List<Transaction>();

            var rows = model.csvInput.Split("\n");

            foreach (var row in rows)
            {
                if (string.IsNullOrWhiteSpace(row)) continue;

                var columns = row.Split(',');

                var transaction = new Transaction();
                switch (model.selectedStyle)
                {
                    case "Date,Amount,Merchant":
                        transaction.TransDate = DateTime.Parse(columns[0].Trim('\"'));
                        transaction.Amount = double.Parse(columns[1].Trim('\"'));
                        transaction.Merchant = columns[2].Trim('\"');
                        break;
                    case "Date,Merchant,Amount":
                        transaction.TransDate = DateTime.Parse(columns[0].Trim('\"'));
                        transaction.Merchant = columns[1].Trim('\"');
                        transaction.Amount = double.Parse(columns[2].Trim('\"'));
                        break;
                    case "Merchant,Date,Amount":
                        transaction.Merchant = columns[0].Trim('\"');
                        transaction.TransDate = DateTime.Parse(columns[1].Trim('\"'));
                        transaction.Amount = double.Parse(columns[2].Trim('\"'));
                        break;
                    case "Merchant,Amount,Date":
                        transaction.Merchant = columns[0].Trim('\"');
                        transaction.Amount = double.Parse(columns[1].Trim('\"'));
                        transaction.TransDate = DateTime.Parse(columns[2].Trim('\"'));
                        break;
                }
                transaction.Account = model.selectedAccount;

                bool exists = _context.Transactions.AsEnumerable().Any(t => t.TransDate == transaction.TransDate
                                            && t.Merchant == transaction.Merchant
                                            && t.Amount == transaction.Amount);
                if(!exists){
                    transactions.Add(transaction);
                }
            }

            try
            {
                await _context.Transactions.AddRangeAsync(transactions);
                await _context.SaveChangesAsync();
                ErrorMessage = $"Uploaded {transactions.Count} transactions successfully.";
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Failed to upload transactions: {ex.Message}";
            }
            finally
            {
                Running = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    void OnIvalidSubmit()
    {
        NotificationService.Notify(NotificationSeverity.Error, "Error", "Form has errors!");
    }
}